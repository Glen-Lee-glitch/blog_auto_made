# 🤖 AI 기술 블로그 생성기 프로젝트 규칙

이 문서는 AI가 우리 프로젝트의 코드와 결과물을 일관성 있게 생성하도록 돕기 위한 규칙입니다. AI 어시스턴트는 채팅이나 코드 생성 시 반드시 이 규칙을 참고해 주세요.

---

### **1. 핵심 목표 및 기능**

-   이 프로젝트의 최종 목표는 **Git 커밋 로그**나 **코드 변경점**을 분석하여, 그 내용을 바탕으로 **기술 블로그 초안(Markdown 형식)**을 자동으로 생성하는 것입니다.
-   핵심 기능: Git 분석, LLM을 활용한 내용 생성, Markdown 포맷팅.

---

### **2. 주요 기술 스택**

코드 생성 및 수정 시 아래 라이브러리를 우선적으로 사용해 주세요.

-   **언어**: Python 3.10+
-   **AI/LLM 연동**: `openai` 또는 `langchain` 라이브러리를 사용합니다.
-   **Git 연동**: `GitPython` 라이브러리를 사용하여 리포지토리 정보를 읽습니다.
-   **환경 변수 관리**: `python-dotenv`를 사용하여 API 키 등의 민감 정보를 관리합니다. `.env` 파일 사용을 전제로 코드를 작성해 주세요.

    ```python
    # API 키는 절대 코드에 하드코딩하지 마세요.
    # 예시:
    import os
    from dotenv import load_dotenv

    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")
    ```

---

### **3. 프로젝트 구조**

프로젝트의 기본 폴더 구조는 다음과 같습니다. 기능을 추가할 때 이 구조를 따라주세요.

-   `src/`
    -   `git_analyzer.py`: Git 로그를 분석하고 변경 사항을 추출하는 모듈
    -   `content_generator.py`: LLM에 요청을 보내 블로그 본문을 생성하는 모듈
    -   `post_formatter.py`: 생성된 텍스트를 최종 Markdown 형식으로 변환하는 모듈
    -   `main.py`: 전체 프로세스를 조율하고 실행하는 메인 스크립트

---

### **4. 코딩 스타일 및 컨벤션**

-   **Docstrings**: 모든 함수와 클래스에는 **Google 스타일 Docstring**을 작성해 주세요. (예: Args, Returns)
-   **로깅(Logging)**: `print()` 대신 파이썬의 `logging` 모듈을 사용해 주요 이벤트와 오류를 기록해 주세요.
-   **타입 힌트(Type Hinting)**: 모든 함수의 매개변수와 반환 값에는 타입 힌트를 반드시 추가해 주세요.

---

### **5. 최종 결과물 (블로그 포스트) 형식**

AI가 생성하는 기술 블로그는 아래의 Markdown 구조를 따라야 합니다.

```markdown
# {오늘의 주요 업데이트 제목}

## ✨ 들어가며
오늘 어떤 기능을 개발했는지, 혹은 어떤 버그를 수정했는지 간략하게 소개하는 문단입니다.

## 📝 주요 변경 사항
- ({관련 Git 커밋 해시}) 변경된 핵심 로직이나 기능에 대해 서술합니다.
- 코드 블록을 사용해 실제 코드 변경점을 보여줍니다.

## 💡 구현 과정 및 배운 점
개발 과정에서 겪었던 어려움, 해결 방법, 새롭게 알게 된 점 등을 자유롭게 서술합니다.

## ✅ 마무리
다음 계획이나 소감을 짧게 남기는 문단입니다.